package io.zipcoder.casino.CardGame.BlackJack;import io.zipcoder.casino.CardGame.Card;import io.zipcoder.casino.Casino_test;import io.zipcoder.casino.Console;import io.zipcoder.casino.Player;import java.util.ArrayList;public class BlackJackGameplay {    private Player player;    private Casino_test instance = Casino_test.getInstance();    private BlackJack blackJack;    private BlackJackPlayer blackJackPlayer;    private BlackJackPlayer dealer;    private BlackJackPlayer activePlayer;    private ArrayList<Integer> handValue;    private int turnNumber;    private int stands;    private boolean flag;//    private ArrayList<Card> playerHand = activePlayer.getPlayerHand();//    private int playerValue = activePlayer.getHandValue();//    private Player originalPlayer = blackJackPlayer.getPlayer();//    private int playerWallet = originalPlayer.getWallet();//    private int betPot = blackJackPlayer.getBetPot();    // public BlackJackGameplay() {}    public BlackJackGameplay(BlackJack blackJack) {        this.blackJack = blackJack;        blackJackPlayer = blackJack.getBlackJackPlayers().get(1);        dealer = blackJack.getDealer();        turnNumber = 0;        stands = 0;        flag = true;    }    public void start(Player player) {        askForBet(blackJackPlayer);        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nGAME START - DEALING CARDS");        blackJack.deal();        while (flag) {            determineActivePlayer(blackJack);            setHandValue(blackJack.countPlayerHand(activePlayer));            checkFirstTurnWin(blackJack);            if (stands == 2) {                twoStands(player);            } else if (activePlayer == dealer) {                dealerTurn();            } else if (activePlayer == blackJackPlayer) {                String response = Console_BlackJack.inGameMenu(blackJack, blackJackPlayer, dealer);                playerChoice(response);            }        }        String input = Console.getStringInput("\n~~~~~~~~~~~~~~~~~~~\n\nWould you like to play again?\n\n<< Yes - No >>").toUpperCase();        switch (input) {            case "YES":                resetGame();                start(player);                break;            case "NO":                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nReturning to the Casino!");                // go back to casino                instance.chooseGame();                break;        }    }    public void resetGame() {        dealer.resetHand();        blackJackPlayer.resetHand();        blackJackPlayer.setInitialBet(0);        blackJackPlayer.setBetPot(0);        setStands(0);        setTurnNumber(0);        setFlag(true);    }    public void twoStands(Player player) {        if (blackJackPlayer.getHandValue() > dealer.getHandValue()) {            updateWallet('+');            Console_BlackJack.endOfGame(blackJack, blackJackPlayer, '+');        } else if (blackJackPlayer.getHandValue() < dealer.getHandValue()) {            updateWallet('-');            Console_BlackJack.endOfGame(blackJack, blackJackPlayer, '-');        } else if (blackJackPlayer.getHandValue() == dealer.getHandValue()) {            Console_BlackJack.endOfGame(blackJack, blackJackPlayer, ' ');        }        setFlag(false);    }    public void dealerTurn() {        System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nDEALER'S TURN");        int dealerValue = dealer.getHandValue();        if (dealerValue > 15 && dealerValue < 21) {            setTurnNumber(turnNumber + 1);            blackJack.stand();            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");        } else {            blackJack.hit(dealer);            dealerHitResult();        }        setStands(getStands() + 1);    }    public void dealerHitResult(){        int dealerValue = dealer.getHandValue();        if (dealerValue > 21) {            updateWallet('+');            Console_BlackJack.endOfGame(blackJack, dealer, '+');            setFlag(false);        } else if (dealerValue == 21) {            updateWallet('-');            Console_BlackJack.endOfGame(blackJack, dealer, '-');            setFlag(false);        } else if (handValue.get(0) < 21 || (handValue.size() > 2 && handValue.get(1) < 21)) {            setTurnNumber(turnNumber + 1);            blackJack.stand();            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");        }    }    public void ifPlayerActive(BlackJackPlayer blackJackPlayer) {        if (activePlayer == blackJackPlayer && stands < 2) {//            switch (response) {//                case "HIT"://                    blackJack.hit(blackJackPlayer);//                    hitResult(blackJackPlayer);//                    break;//                case "STAND"://                    blackJack.setNumOfTurns(turnNumber++);//                    blackJack.stand();//                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");//                    stands++;//                    break;//                case "DOUBLE DOWN"://                    blackJack.doubleDown(activePlayer);//                    break;//                case "SPLIT"://                    blackJack.split(activePlayer);//                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nok so the code itself works but idk how to actually implement it into the game without going crazy so plz choose something else");//                    break;//                case "QUIT"://                    instance.chooseGame();//                    break;//                default://                    System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nInput unknown, please try again");//                    break;//            }        }    }    public void playerChoice(String response) {        response.toUpperCase();        switch (response) {            case "HIT":                blackJack.hit(blackJackPlayer);                hitResult(blackJackPlayer);                break;            case "STAND":                blackJack.stand();                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nStanding still!");                setTurnNumber(turnNumber + 1);                setStands(getStands() + 1);                break;            case "DOUBLE DOWN":                blackJack.doubleDown(activePlayer);                break;            case "SPLIT":                blackJack.split(activePlayer);                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nok so the code itself works but idk how to actually implement it into the game without going crazy so plz choose something else");                break;            case "QUIT":                instance.chooseGame();                break;            default:                System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nInput unknown, please try again");                break;        }    }    public void hitResult(BlackJackPlayer blackJackPlayer) {        if (blackJackPlayer == dealer) {            if (dealer.getHandValue() > 21) {                updateWallet('+');                Console_BlackJack.endOfGame(blackJack, blackJackPlayer, '+');                setFlag(false);            } else if (dealer.getHandValue() == 21) {                updateWallet('-');                Console_BlackJack.endOfGame(blackJack, blackJackPlayer, '-');                setFlag(false);            }        }    }    public void checkFirstTurnWin(BlackJack blackJack) {        if (turnNumber == 0 && dealer.getHandValue() == 21) {            updateWallet('-');            Console_BlackJack.endOfGame(blackJack, dealer, '-');            setFlag(false);        } else if (turnNumber == 0 && blackJackPlayer.getHandValue() == 21) {            updateWallet('+');            Console_BlackJack.endOfGame(blackJack, dealer, '+');            setFlag(false);        }    }    public void determineActivePlayer(BlackJack blackJack) {        if (turnNumber % 2 == 1) {            setActivePlayer(dealer);        } else {            setActivePlayer(blackJack.getThePlayer());        }    }    public void askForBet(BlackJackPlayer blackJackPlayer) {        int initialBet = Console.getIntInput("\n~~~~~~~~~~~~~~~~~~~\n\nHow much would you like to bet?");        if (initialBet < blackJack.getMinBet()) {            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nThe minimum bet is $50. Please try again.");            blackJack.start();        } else {            blackJackPlayer.setInitialBet(blackJack.betAmount(initialBet, blackJackPlayer));        }    }    public void updateWallet(char winOrLose) {        if (winOrLose == '+') {            blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() + blackJackPlayer.getBetPot());        } else if (winOrLose == '-') {            blackJackPlayer.getPlayer().setWallet(blackJackPlayer.getPlayer().getWallet() - blackJackPlayer.getBetPot());        }    }    public BlackJackPlayer getActivePlayer() {        return this.activePlayer;    }    public void setActivePlayer(BlackJackPlayer activePlayer) {        this.activePlayer = activePlayer;    }    public BlackJackPlayer getBlackJackPlayer() {        return blackJackPlayer;    }    public void setBlackJackPlayer(BlackJackPlayer blackJackPlayer) {        this.blackJackPlayer = blackJackPlayer;    }    public BlackJackPlayer getDealer() {        return dealer;    }    public void setDealer(BlackJackPlayer dealer) {        this.dealer = dealer;    }    public ArrayList<Integer> getHandValue() {        return handValue;    }    public void setHandValue(ArrayList<Integer> handValue) {        this.handValue = handValue;    }    public int getTurnNumber() {        return turnNumber;    }    public void setTurnNumber(int turnNumber) {        this.turnNumber = turnNumber;    }    public int getStands() {        return stands;    }    public void setStands(int stands) {        this.stands = stands;    }    public boolean isFlag() {        return flag;    }    public void setFlag(boolean flag) {        this.flag = flag;    }    public String formatHand(ArrayList<Card> array) {        String stringHand = "";        String uglyArray = array.toString();        for (int i = 0; i < uglyArray.length(); i++) {            if (uglyArray.charAt(i) != ' ' && uglyArray.charAt(i) != '[' && uglyArray.charAt(i) != ']' && uglyArray.charAt(i) != ',') {                stringHand += uglyArray.charAt(i);            } else if (uglyArray.charAt(i) == ' ') {                stringHand += " || ";            }        }        return stringHand;    }    public String formatHandValue(ArrayList<Integer> array) {        String stringHandValue = "";        String uglyArray = array.toString();        for (int i = 0; i < uglyArray.length(); i++) {            if (uglyArray.charAt(i) != ' ' && uglyArray.charAt(i) != '[' && uglyArray.charAt(i) != ']' && uglyArray.charAt(i) != ',') {                stringHandValue += uglyArray.charAt(i);            } else if (uglyArray.charAt(i) == ' ') {                stringHandValue += " or ";            }        }        return stringHandValue;    }}