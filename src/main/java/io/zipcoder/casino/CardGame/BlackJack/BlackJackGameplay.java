package io.zipcoder.casino.CardGame.BlackJack;import io.zipcoder.casino.Casino;import io.zipcoder.casino.Console;import io.zipcoder.casino.Player;import java.util.ArrayList;public class BlackJackGameplay {    private Casino casino;    private BlackJack blackJack;    private BlackJackPlayer blackJackPlayer;    private BlackJackPlayer dealer;    private BlackJackPlayer activePlayer;    private ArrayList<Integer> handValue;    private int turnNumber;    private int stands;    private boolean flag;    public BlackJackGameplay(BlackJack blackJack) {        this.blackJack = blackJack;        this.blackJackPlayer = blackJack.getBlackJackPlayers().get(1);        this.dealer = blackJack.getDealer();        this.turnNumber = 0;        this.stands = 0;        this.flag = true;    }    public void start(Player player) {        askForBet(blackJackPlayer);        Console_BlackJack.initiateGame(blackJackPlayer);        blackJack.deal();        while (flag) {            determineActivePlayer(blackJack);            setHandValue(blackJack.countPlayerHand(activePlayer));            checkFirstTurnWin(blackJack);            if (stands == 2) {                twoStands(blackJackPlayer);            } else if (activePlayer == dealer) {                dealerTurn();            } else if (activePlayer == blackJackPlayer) {                String response = Console_BlackJack.inGameMenu(blackJack, blackJackPlayer, dealer);                playerChoice(response);            }        }        askPlayAgain();    }    public void askForBet(BlackJackPlayer blackJackPlayer) {        int initialBet = Console.getIntInput("\n~~~~~~~~~~~~~~~~~~~\n\nHow much would you like to bet?");        if (initialBet < blackJack.getMinBet()) {            System.out.println("\n~~~~~~~~~~~~~~~~~~~\n\nThe minimum bet is $50. Please try again.");            blackJack.start();        } else {            blackJackPlayer.setInitialBet(blackJack.betAmount(initialBet, blackJackPlayer));        }    }    public void determineActivePlayer(BlackJack blackJack) {        if (turnNumber % 2 == 1) {            setActivePlayer(dealer);        } else {            setActivePlayer(blackJack.getThePlayer());        }    }    public void checkFirstTurnWin(BlackJack blackJack) {        if (turnNumber == 0 && dealer.getHandValue() == 21) {            updateWallet(2,'-');            Console_BlackJack.endGame(blackJack, dealer, '-');            setFlag(false);        } else if (turnNumber == 0 && blackJackPlayer.getHandValue() == 21) {            updateWallet(2,'+');            Console_BlackJack.endGame(blackJack, dealer, '+');            setFlag(false);        }    }    public void twoStands(BlackJackPlayer blackJackPlayer) {        if (blackJackPlayer.getHandValue() > dealer.getHandValue()) {            updateWallet(1,'+');            Console_BlackJack.endGame(blackJack, blackJackPlayer, '+');        } else if (blackJackPlayer.getHandValue() < dealer.getHandValue()) {            updateWallet(1,'-');            Console_BlackJack.endGame(blackJack, blackJackPlayer, '-');        } else if (blackJackPlayer.getHandValue() == dealer.getHandValue()) {            Console_BlackJack.endGame(blackJack, blackJackPlayer, ' ');        }        setFlag(false);    }    public void dealerTurn() {        Console_BlackJack.dealerTurn();        int dealerValue = dealer.getHandValue();        if (dealerValue > 15 && dealerValue < 21) {            Console_BlackJack.standingStill();            blackJack.stand();        } else {            blackJack.hit(dealer);            dealerHitResult();        }        setTurnNumber(turnNumber + 1);        setStands(getStands() + 1);    }    public void dealerHitResult() {        int dealerValue = dealer.getHandValue();        if (dealerValue > 21) {            updateWallet(1,'+');            Console_BlackJack.endGame(blackJack, blackJackPlayer, '+');            setFlag(false);        } else if (dealerValue == 21) {            updateWallet(1,'-');            Console_BlackJack.endGame(blackJack, blackJackPlayer, '-');            setFlag(false);        } else if (dealer.getHandValue() < 21 || (dealer.getPlayerHand().size() > 2 && dealer.getHandValue() < 21)) {            Console_BlackJack.standingStill();            blackJack.stand();        }    }    public void playerChoice(String response) {        String bigResponse = response.toUpperCase();        switch (bigResponse) {            case "HIT":                blackJack.hit(blackJackPlayer);                hitResult(blackJackPlayer);                break;            case "STAND":                blackJack.stand();                Console_BlackJack.standingStill();                setTurnNumber(turnNumber + 1);                setStands(getStands() + 1);                break;            case "DOUBLE DOWN":                blackJack.doubleDown(blackJackPlayer);                break;            case "QUIT":                Console_BlackJack.goodByeMessage();                blackJack.end();                setFlag(false);                break;            default:                Console_BlackJack.inputError();                break;        }    }    public void hitResult(BlackJackPlayer blackJackPlayer) {        if (blackJackPlayer.getHandValue() > 21) {            updateWallet(1, '-');            Console_BlackJack.endGame(blackJack, blackJackPlayer, '-');            setFlag(false);        } else if (blackJackPlayer.getHandValue() == 21) {            updateWallet(1,'+');            Console_BlackJack.endGame(blackJack, blackJackPlayer, '+');            setFlag(false);        }    }    public void updateWallet(int multiplier, char winOrLose) {        Player player = blackJackPlayer.getPlayer();        if (winOrLose == '+') {            player.setWallet(player.getWallet() + (blackJackPlayer.getBetPot() * multiplier));        } else if (winOrLose == '-') {            player.setWallet(player.getWallet() - (blackJackPlayer.getBetPot() * multiplier));        }    }    public void resetGame() {        dealer.resetHand();        blackJackPlayer.resetHand();        blackJackPlayer.setInitialBet(0);        blackJackPlayer.setBetPot(0);        setStands(0);        setTurnNumber(0);        setFlag(true);    }    public void askPlayAgain() {        String input = Console_BlackJack.askPlayAgain();        switch (input) {            case "YES":                resetGame();                start(blackJackPlayer.getPlayer());                break;            case "NO":                Console_BlackJack.goodByeMessage();                blackJack.end();                break;        }    }    public BlackJackPlayer getActivePlayer() {        return this.activePlayer;    }    public void setActivePlayer(BlackJackPlayer activePlayer) {        this.activePlayer = activePlayer;    }    public BlackJackPlayer getDealer() {        return dealer;    }    public void setHandValue(ArrayList<Integer> handValue) {        this.handValue = handValue;    }    public int getTurnNumber() {return this.turnNumber; }    public void setTurnNumber(int turnNumber) {        this.turnNumber = turnNumber;    }    public int getStands() {        return stands;    }    public void setStands(int stands) {        this.stands = stands;    }    public void setFlag(boolean flag) {        this.flag = flag;    }    public boolean getFlag() { return this.flag; }}